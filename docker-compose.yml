services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT:-3000}:3000"
    env_file:
      - .env
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres:alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${SQL_DATABASE}
      POSTGRES_USER: ${SQL_USERNAME}
      POSTGRES_PASSWORD: ${SQL_PASSWORD}
    ports:
      - "${SQL_PORT:-5432}:5432"
    networks:
      - app_network
    volumes:
      - psql_v:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SQL_USERNAME} -d ${SQL_DATABASE} -h ${SQL_HOST} -p ${SQL_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5


  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    networks:
      - app_network
    volumes:
      - pgadmin_v:/var/lib/pgadmin

  redis:
    image: redis:7.2-alpine
    container_name: redis_service
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-example}"]
    networks:
      - app_network
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-example}
    volumes:
      - redis_v:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-example}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  psql_v:
  pgadmin_v:
  redis_v:

networks:
  app_network:
    driver: bridge
